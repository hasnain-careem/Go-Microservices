// Code generated by mockery v3.2.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	repository "booking-service/repository"
	"testing"
)

// BookingRepository is an autogenerated mock type for the BookingRepository type
type BookingRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, userID, rideID
func (_m *BookingRepository) Create(ctx context.Context, userID int32, rideID int32) (*repository.Booking, error) {
	ret := _m.Called(ctx, userID, rideID)

	var r0 *repository.Booking
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) *repository.Booking); ok {
		r0 = rf(ctx, userID, rideID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Booking)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = rf(ctx, userID, rideID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *BookingRepository) GetByID(ctx context.Context, id int32) (*repository.Booking, error) {
	ret := _m.Called(ctx, id)

	var r0 *repository.Booking
	if rf, ok := ret.Get(0).(func(context.Context, int32) *repository.Booking); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Booking)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBookingRepository creates a new instance of BookingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookingRepository(t mock.TestingT) *BookingRepository {
	mock := &BookingRepository{}
	mock.Mock.Test(t)

	if tb, ok := t.(testing.TB); ok {
		tb.Cleanup(func() { mock.AssertExpectations(t) })
	}

	return mock
}
