// Code generated by mockery v3.2.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	repository "ride-service/repository"
	"testing"
)

// RideRepository is an autogenerated mock type for the RideRepository type
type RideRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, source, destination, distance, cost
func (_m *RideRepository) Create(ctx context.Context, source string, destination string, distance int32, cost int32) (int32, error) {
	ret := _m.Called(ctx, source, destination, distance, cost)

	var r0 int32
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int32, int32) int32); ok {
		r0 = rf(ctx, source, destination, distance, cost)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int32, int32) error); ok {
		r1 = rf(ctx, source, destination, distance, cost)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *RideRepository) GetByID(ctx context.Context, id int32) (*repository.Ride, error) {
	ret := _m.Called(ctx, id)

	var r0 *repository.Ride
	if rf, ok := ret.Get(0).(func(context.Context, int32) *repository.Ride); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Ride)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, source, destination, distance, cost
func (_m *RideRepository) Update(ctx context.Context, id int32, source string, destination string, distance int32, cost int32) (string, error) {
	ret := _m.Called(ctx, id, source, destination, distance, cost)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, int32, string, string, int32, int32) string); ok {
		r0 = rf(ctx, id, source, destination, distance, cost)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32, string, string, int32, int32) error); ok {
		r1 = rf(ctx, id, source, destination, distance, cost)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRideRepository creates a new instance of RideRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRideRepository(t mock.TestingT) *RideRepository {
	mock := &RideRepository{}
	mock.Mock.Test(t)

	if t, ok := t.(*testing.T); ok {
		t.Cleanup(func() { mock.AssertExpectations(t) })
	}

	return mock
}
