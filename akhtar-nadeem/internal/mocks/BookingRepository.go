// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// BookingRepository is an autogenerated mock type for the BookingRepository type
type BookingRepository struct {
	mock.Mock
}

// CreateBooking provides a mock function with given fields: userID, source, destination, distance, cost
func (_m *BookingRepository) CreateBooking(userID string, source string, destination string, distance int32, cost int32) (string, string, time.Time, error) {
	ret := _m.Called(userID, source, destination, distance, cost)

	if len(ret) == 0 {
		panic("no return value specified for CreateBooking")
	}

	var r0 string
	var r1 string
	var r2 time.Time
	var r3 error
	if rf, ok := ret.Get(0).(func(string, string, string, int32, int32) (string, string, time.Time, error)); ok {
		return rf(userID, source, destination, distance, cost)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, int32, int32) string); ok {
		r0 = rf(userID, source, destination, distance, cost)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, int32, int32) string); ok {
		r1 = rf(userID, source, destination, distance, cost)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string, string, int32, int32) time.Time); ok {
		r2 = rf(userID, source, destination, distance, cost)
	} else {
		r2 = ret.Get(2).(time.Time)
	}

	if rf, ok := ret.Get(3).(func(string, string, string, int32, int32) error); ok {
		r3 = rf(userID, source, destination, distance, cost)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetBookingDetails provides a mock function with given fields: bookingID
func (_m *BookingRepository) GetBookingDetails(bookingID string) (string, string, string, int32, int32, time.Time, string, string, error) {
	ret := _m.Called(bookingID)

	if len(ret) == 0 {
		panic("no return value specified for GetBookingDetails")
	}

	var r0 string
	var r1 string
	var r2 string
	var r3 int32
	var r4 int32
	var r5 time.Time
	var r6 string
	var r7 string
	var r8 error
	if rf, ok := ret.Get(0).(func(string) (string, string, string, int32, int32, time.Time, string, string, error)); ok {
		return rf(bookingID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(bookingID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(bookingID)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) string); ok {
		r2 = rf(bookingID)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(string) int32); ok {
		r3 = rf(bookingID)
	} else {
		r3 = ret.Get(3).(int32)
	}

	if rf, ok := ret.Get(4).(func(string) int32); ok {
		r4 = rf(bookingID)
	} else {
		r4 = ret.Get(4).(int32)
	}

	if rf, ok := ret.Get(5).(func(string) time.Time); ok {
		r5 = rf(bookingID)
	} else {
		r5 = ret.Get(5).(time.Time)
	}

	if rf, ok := ret.Get(6).(func(string) string); ok {
		r6 = rf(bookingID)
	} else {
		r6 = ret.Get(6).(string)
	}

	if rf, ok := ret.Get(7).(func(string) string); ok {
		r7 = rf(bookingID)
	} else {
		r7 = ret.Get(7).(string)
	}

	if rf, ok := ret.Get(8).(func(string) error); ok {
		r8 = rf(bookingID)
	} else {
		r8 = ret.Error(8)
	}

	return r0, r1, r2, r3, r4, r5, r6, r7, r8
}

// NewBookingRepository creates a new instance of BookingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookingRepository {
	mock := &BookingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
